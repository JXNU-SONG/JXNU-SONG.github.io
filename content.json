{"meta":{"title":"YukiSong","subtitle":null,"description":"好少年光芒万丈","author":"YukiSong","url":""},"pages":[{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2020-04-02T16:17:29.953Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[建 议 改 成 ：顶 层 对 话] 与&nbsp; YukiSong&nbsp; （ VIOLET EVERGARDEN ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2020-11-15T17:48:30.648Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2020-04-02T16:30:56.929Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"YukiSong 垆边人似月，皓腕凝霜雪。 【唐】韦庄 《菩萨蛮·人人尽说江南好》","keywords":"留言板"},{"title":"donate","date":"2018-12-12T14:14:16.000Z","updated":"2020-04-01T12:20:10.590Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"有钱人才会进来"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2020-04-02T16:22:40.220Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"}],"posts":[{"title":"洛谷P1073 最优贸易","slug":"最优贸易","date":"2020-11-12T16:00:00.000Z","updated":"2020-11-13T15:43:26.902Z","comments":true,"path":"2020/11/13/最优贸易/","link":"","permalink":"/2020/11/13/最优贸易/","excerpt":"","text":"洛谷P1073 最优贸易最优贸易题目链接 题目描述 C国有n个大城市和m 条道路，每条道路连接这 n个城市中的某两个城市。任意两个城市之间最多只有一条道路直接相连。这 m 条道路中有一部分为单向通行的道路，一部分为双向通行的道路，双向通行的道路在统计条数时也计为 1条。 C国幅员辽阔，各地的资源分布情况各不相同，这就导致了同一种商品在不同城市的价格不一定相同。但是，同一种商品在同一个城市的买入价和卖出价始终是相同的。 商人阿龙来到 C 国旅游。当他得知同一种商品在不同城市的价格可能会不同这一信息之后，便决定在旅游的同时，利用商品在不同城市中的差价赚回一点旅费。设 C 国 n 个城市的标号从 1~ n，阿龙决定从 1号城市出发，并最终在 n 号城市结束自己的旅行。在旅游的过程中，任何城市可以重复经过多次，但不要求经过所有 n 个城市。阿龙通过这样的贸易方式赚取旅费：他会选择一个经过的城市买入他最喜欢的商品――水晶球，并在之后经过的另一个城市卖出这个水晶球，用赚取的差价当做旅费。由于阿龙主要是来 C 国旅游，他决定这个贸易只进行最多一次，当然，在赚不到差价的情况下他就无需进行贸易。 假设 C国有 5个大城市，城市的编号和道路连接情况如下图，单向箭头表示这条道路为单向通行，双向箭头表示这条道路为双向通行。 现在给出 n个城市的水晶球价格，m 条道路的信息（每条道路所连接的两个城市的编号以及该条道路的通行情况）。请你告诉阿龙，他最多能赚取多少旅费。 输入格式输入格式第一行包含 2 个正整数n和 m，中间用一个空格隔开，分别表示城市的数目和道路的数目。 第二行 n 个正整数，每两个整数之间用一个空格隔开，按标号顺序分别表示这 n 个城市的商品价格。 接下来 m 行，每行有3个正整数x,y,z，每两个整数之间用一个空格隔开。如果 z=1，表示这条道路是城市x到城市y之间的单向道路；如果z=2，表示这条道路为城市 x和城市y之间的双向道路。 1≤n≤100000，1≤m≤5000001，1≤x，y≤n，1≤z≤2，1≤各城市水晶球价格≤100。 输出格式一个整数，表示最多能赚取的旅费。如果没有进行贸易，则输出 0。 思路：缩点 + dp 实现代码：#include &lt;iostream&gt; #include &lt;cstdio&gt; #include &lt;vector&gt; #include &lt;cstring&gt; using namespace std; int n, m, k; int from, to, sta; int w[100005]; int vis[100005]; int Min[100005]; int dp[100005]; int cmp[100005]; int org_min[100005]; vector&lt;int&gt; g[100005]; vector&lt;int&gt; rg[100005]; vector&lt;int&gt; v; vector&lt;int&gt; topology[100005]; void add(int from, int to, int sta) { if(sta == 1) { g[from].push_back(to); rg[to].push_back(from); } else { g[from].push_back(to); rg[from].push_back(to); g[to].push_back(from); rg[to].push_back(from); } } void dfs(int u) { vis[u] = 1; for (int i = 0; i &lt; g[u].size(); i++) { if (!vis[g[u][i]]) dfs(g[u][i]); } v.push_back(u); } void rdfs(int u, int k) { vis[u] = 1; cmp[u] = k; Min[k] = min(Min[k], w[u]); for (int i = 0; i &lt; rg[u].size(); i++) { if (!vis[rg[u][i]]) rdfs(rg[u][i], k); } } int main() { scanf(&quot;%d%d&quot;, &amp;n, &amp;m); fill(Min, Min + n + 1, 100); for (int i = 1; i &lt;= n; ++i) { scanf(&quot;%d&quot;, &amp;w[i]); } for (int i = 0; i &lt; m; ++i) { scanf(&quot;%d%d%d&quot;, &amp;from, &amp;to, &amp;sta); add(from, to, sta); } for (int i = 1; i &lt;= n; i++) { if (!vis[i]) dfs(i); } memset(vis, 0, sizeof(vis)); for (int i = v.size() - 1; i &gt;= 0; --i) { if (!vis[v[i]]) rdfs(v[i], ++k); } for (int i = 1; i &lt;= n; ++i) { topology[cmp[i]].push_back(i); } for (int i = 1; i &lt;= k; ++i) { for (int j = 0; j &lt; topology[i].size(); ++j) { int u = topology[i][j]; for (int l = 0; l &lt; g[u].size(); l++) { int v = g[u][l]; Min[cmp[v]] = min(Min[cmp[u]], Min[cmp[v]]); int org = dp[cmp[v]]; dp[cmp[v]] = max(dp[cmp[u]], w[v] - Min[cmp[v]]); dp[cmp[v]] = max(org, dp[cmp[v]]); } } } // for (int i = 1; i &lt;= k; ++i) { // printf(&quot;%d\\n&quot;, dp[i]); // } printf(&quot;%d&quot;, dp[cmp[n]]); }","categories":[{"name":"搞点算法","slug":"搞点算法","permalink":"/categories/搞点算法/"}],"tags":[{"name":"动态规划","slug":"动态规划","permalink":"/tags/动态规划/"}],"keywords":[{"name":"搞点算法","slug":"搞点算法","permalink":"/categories/搞点算法/"}]},{"title":"初创博客感想","slug":"我的创建博客感想","date":"2020-03-31T16:00:00.000Z","updated":"2020-11-13T10:10:37.819Z","comments":true,"path":"2020/04/01/我的创建博客感想/","link":"","permalink":"/2020/04/01/我的创建博客感想/","excerpt":"","text":"初创博客感想 看了学长的个人网站，心血来潮，说俺也要来一个。我看到可以有个个人的网站，里面还可以放自己喜欢的人物，写自己的技术博客，可以写自己的感想，真的好兴奋。但是说实话，这个过程真的挺折腾人。作为一个刚刚入学还不到两个学期的计算机小白来说，很多东西看着一脸懵B，比如啥github，什么CDN,我说那都啥跟啥啊。翻来覆去终于把基本的hexo初始的landscape搭建好，但是我看了一眼，我寻思这跟学长的那个差的也太远了，后来倒腾了半天，才重新装上sakura，因为我好半天才发现sakura在github上发布的主题是整个包，我搞了半天都是把它放到theme文件夹下面，结果一直出错误。 最终终于把sakura的初始页面开启了，然后我才发现，历经九九八十一难，打开这样的初始页面，只是创建这个博客的开始罢了。网上搜了一大堆初始化sakura的教程。可能各种大佬实现自定义的方式不太一一样，有些配置左一个配置方法右一个配置方法，眼花缭乱了。还有没想到的是我要插入图片要在github创一个放东西的仓管，各种初始化，连接到cdn的网络，然后还要不断添加信息添加新版本什么的。然后还有很多自己可以定义的东西之类的，有的地方教程也不会讲到，就只有自己一个个文件打开来摸索了。 总的来说，对于现在的计算机小白的我来说，整个过程真的太需要毅力了。但是转念一想，可以把自己喜欢的东西都装进来的话，也就还是要一直做下去了。写下这篇文章时，本博客还有最后一个东西没有优化，但是有时间一定会去完成的，就是用转用coding来访问我的个人网站，因为现在用github走国外的流确实打开来有点慢了，感觉挺不稳定的，正好过几天就有时间了，这几天是真的不能再多磨了，已经快弄了整整三天了，学校有的事情还没去做，尽快把事情做完了，心里也更舒坦。 END","categories":[{"name":"奇思妙想","slug":"奇思妙想","permalink":"/categories/奇思妙想/"}],"tags":[{"name":"感想","slug":"感想","permalink":"/tags/感想/"}],"keywords":[{"name":"奇思妙想","slug":"奇思妙想","permalink":"/categories/奇思妙想/"}]},{"title":"最佳加法表达式","slug":"Hexo-Theme-Sakura","date":"2020-03-31T16:00:00.000Z","updated":"2020-04-02T09:14:33.301Z","comments":true,"path":"2020/04/01/Hexo-Theme-Sakura/","link":"","permalink":"/2020/04/01/Hexo-Theme-Sakura/","excerpt":"","text":"4152:最佳加法表达式（C/C++基础写法，无任何特殊函数）最佳加法表达式题目链接 4152:最佳加法表达式 时间限制: 1000ms内存限制: 65536kB 描述给定n个1到9的数字，要求在数字之间摆放m个加号(加号两边必须有数字），使得所得到的加法表达式的值最小，并输出该值。例如，在1234中摆放1个加号，最好的摆法就是12+34,和为36 输入有不超过15组数据每组数据两行。第一行是整数m，表示有m个加号要放( 0&lt;=m&lt;=50)第二行是若干个数字。数字总数n不超过50,且 m &lt;= n-1输出对每组数据，输出最小加法表达式的值样例输入21234561123456412345 样例输出10257915 提示要用到高精度计算，即用数组来存放long long 都装不下的大整数，并用模拟列竖式的办法进行大整数的加法。 首先这是一道动态规划的题目，本人是用递推的方式来进行解答的。这题个人感觉确实很复杂，因为不仅仅要找到动态规划的子问题，还要实现高精度计算和比大小。然后因为鉴于本人尚未学习C++的STL库函数，这里的语法和函数只要是学完了c或者c++的基础语法的同学都是可以看懂的。那么一步步来吧： 1.找到递推式：如果是看过郭炜老师慕课的同学，相信对找到子问题应该是差不多明白的，郭炜老师讲的还是十分清楚滴，不会的话多看几遍应该就可以懂了。那么简单的说明一下就是考虑最后一个加号的位置，假设要插入m个加号到n个数字中，然后最后一个加号的位置可以有很多，但是起码得放在前面有m个数字的后一位，因为毕竟前面要放下m-1个加号，然后也最起码得放在最后一个数字前面。这就是最后一个加号位置的所有情况了。现在我们假设把‘+’放在了第i个数字的右边，那么它的值将会等于在i个数字中插入m-1个加号的最佳加法表达式的值，再加上后面一串直接形成的数字的值。所以依据我们上面所说的最后一个加号的所有可能的情况的分析，我们得在m&lt;=i&lt;=n-1中找到最合适的i使得值最小。这也就是递推式V(m,n)=Min{V(M-1,I)+Num(i+1,n)}(i=m…n-1)的由来。注：倘若m==0,那么值自然直接等于那串数字。 2.高精度计算：我觉得这就是让这题突然变得很复杂的地方，可能一开始会觉得，哎呀找到递推式啦，好像就要快写出来了，然后发现要高精度计算，然后还发现要不断的高精度计算，还得去把高精度计算的结果去比较，和保存，也就相当于赋值一样。当然能不耐烦的去调试的话，还是可以写出来的。（1）开一个结构体：因为这里用到的是递推，然后有两个变量分别是m和n，所以得用二维数组来递推，然后每一个元素里面包含的是一个高精度数值，也就是个数组，所以得在二维数组里面放数组，比较方便的就是开一个结构体。 struct kkk { char num[110]; }Num[110][110],v[110][110]; 下面kkk都代表这个结构体哟（这个结构体我是真的不知道取啥名）（2）高精度加法：这里因为只要添加‘+’，所以我们只要进行高精度加法。（本人写的高精度加法可能有点复杂，因为可能也是第一次写，但我会尽力写上说明和注释让大家看懂）==说明：传入的两个结构体肯定一个是Num[ ][ ]，一个是v[ ][ ],然后为了更方便的计算，就把Num[ ][ ]和v[ ][ ]里面的值首先转成数字存到q[ ]和w[ ]里面，结果先由c去接收，因为加出来会有别的特殊情况，所以最终结果用cz接收。== void pluss(kkk a,kkk b,int q[],int w[],int c[],char cz[]) { int lena=strlen(a.num),lenb=strlen(b.num),i,j;//将值存入q[] for(int i=0,j=lena-1;j&gt;=0;++i,j--)//值存入时是倒置存入，这样更方便进位和计算。 { q[i]=a.num[j]-48; } for(int i=0,j=lenb-1;j&gt;=0;++i,j--)//将值存入w[] { w[i]=b.num[j]-48; } int g=max(lena,lenb);//找到位数最多的一个数字，那么他们加起来最多就只有g+1位 for(int i=0;i&lt;g;++i) { c[g-i]+=q[i]+w[i]; if(c[g-i]&gt;=10)//进位 { c[g-i]-=10; c[g-i-1]+=1; } } if(c[0])//数组本身是全置0的，倘若第一位还是0，那么说明加到最高位的时候并没有进位，反之则进位 i=0; else i=1; for(j=0;i&lt;=g;++i,j++)//将结果存到cz中 { cz[j]=c[i]+48; } cz[j]=&#39;\\0&#39;; } （3）高精度比较：那么要找到最小只会相加肯定不行，还要比大小。当然，比较大小就很好理解了。==说明：比大小就直接先比位数，说白了就是比长度，长度一样直接一用strcmp函数就出来了。== int compare(kkk minmin,char c[]) { int lenc=strlen(c),lenmin=strlen(minmin.num); if(lenc&gt;lenmin)//比位数 return 0; else if(lenc&lt;lenmin) return 1; else { if(strcmp(c,minmin.num)&lt;0) return 1; else return 0; } } （4）高精度赋值：这个我想不需要细讲，说白了就像字符串复制一样。一开始就得把所有的Num[ ][ ]给“赋值”上，毕竟人家在我们输入完之后就是定值。还有比完大小之后，如果比成功了那就得给最小值赋新的值，最后也要把最小值赋给v数组里面的相应元素，所以要进行这个“赋值”操作。==说明：m,n分别代表复制的起点下标和终点下标。== void mycopy(char a[],char b[],int m,int n) { int i,j; for(i=m,j=0;i&lt;=n;++i,j++) { b[j]=a[i]; } b[j]=&#39;\\0&#39;; } 接下来就是将他们组合的时候了 #include&lt;iostream&gt; #include&lt;cstdio&gt; #include&lt;string&gt; #include&lt;cstring&gt; using namespace std; struct kkk { char num[110]; }Num[110][110],v[110][110]; int q[110],w[110],c[110]; char cz[110]; void pluss(kkk a,kkk b,int q[],int w[],int c[],char cz[]) { int lena=strlen(a.num),lenb=strlen(b.num),i,j; for(int i=0,j=lena-1;j&gt;=0;++i,j--) { q[i]=a.num[j]-48; } for(int i=0,j=lenb-1;j&gt;=0;++i,j--) { w[i]=b.num[j]-48; } int g=max(lena,lenb); for(int i=0;i&lt;g;++i) { c[g-i]+=q[i]+w[i]; if(c[g-i]&gt;=10) { c[g-i]-=10; c[g-i-1]+=1; } } if(c[0]) i=0; else i=1; for(j=0;i&lt;=g;++i,j++) { cz[j]=c[i]+48; } cz[j]=&#39;\\0&#39;; } void mycopy(char a[],char b[],int m,int n) { int i,j; for(i=m,j=0;i&lt;=n;++i,j++) { b[j]=a[i]; } b[j]=&#39;\\0&#39;; } int compare(kkk minmin,char c[]) { int lenc=strlen(c),lenmin=strlen(minmin.num); if(lenc&gt;lenmin) return 0; else if(lenc&lt;lenmin) return 1; else { if(strcmp(c,minmin.num)&lt;0) return 1; else return 0; } } int main() { kkk minmin; int m; char a[100]; while(cin&gt;&gt;m) { cin&gt;&gt;a+1; int n=strlen(a+1); for(int i=1;i&lt;=n;++i) { for(int j=i;j&lt;=n;++j) { mycopy(a+1,Num[i][j].num,i-1,j-1); } } for(int j=1;j&lt;=n;++j) { mycopy(a+1,v[0][j].num,0,j-1); } for(int i=1;i&lt;=m;i++) { for(int j=1;j&lt;=n;++j) { memset(minmin.num,9,sizeof(minmin.num)); minmin.num[109]=&#39;\\0&#39;; if(j-1&gt;=i){ for(int k=i;k&lt;j;++k) { memset(q,0,sizeof(q)); memset(w,0,sizeof(w)); memset(c,0,sizeof(c)); memset(cz,0,sizeof(cz)); pluss(v[i-1][k],Num[k+1][j],q,w,c,cz); if(compare(minmin,cz)){ int lencc=strlen(cz); mycopy(cz,minmin.num,0,lencc-1);} } int lenminmin=strlen(minmin.num); mycopy(minmin.num,v[i][j].num,0,lenminmin-1);} } } int i=0; while(v[m][n].num[i]!=&#39;\\0&#39;){ cout&lt;&lt;v[m][n].num[i++];} cout&lt;&lt;endl; } } 写这道题确实花了很久的时间，无论是写出来还是最终的不断的调试，但是也不得不说它极大的锻炼了我的耐心，在不断的逻辑错误下面找到细节错误确实很锻炼人，这也提醒我在写的时候就要细心细心再细心。希望大家都有所收获。","categories":[{"name":"搞点算法","slug":"搞点算法","permalink":"/categories/搞点算法/"}],"tags":[{"name":"动态规划","slug":"动态规划","permalink":"/tags/动态规划/"}],"keywords":[{"name":"搞点算法","slug":"搞点算法","permalink":"/categories/搞点算法/"}]}]}